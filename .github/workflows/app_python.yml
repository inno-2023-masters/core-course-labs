name: Linter, Tests, Build, and Push

on:
  push:
    paths:
      - '**.yml'
      - '**.py'
      - 'Dockerfile'
      - 'requirements.txt'
  pull_request:
    branches: [ main ]

jobs:


  test_and_lint:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./app_python

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    # Try to take items out of cache, otherwise cache them.

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.cache/flake8
          ~/.cache/pytest
        key: ${{ runner.os }}-pip-flake8-pytest-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-flake8-pytest-

    # Setting up the environment, installing all requirements.

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.8"
        cache: "pip"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    # Linting. Checking for common issues.

    - name: Linter
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    # Testing using pytest.
    
    - name: Tests
      run: python -m pytest

  # Set up snyk

  snyk:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Check for vulnerabilities
        uses: snyk/actions/python-3.8@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --file=app_python/requirements.txt
            --package-manager=pip
            --skip-unresolved

  # Pushing to docker once all is done.

  push_docker:
    runs-on: ubuntu-latest

    needs: test_and_lint

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push
        uses: docker/build-push-action@v5
        with:
          context: app_python
          push: true
          tags:  ${{ secrets.DOCKER_USERNAME }}/app_python:latest